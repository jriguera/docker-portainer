[
  {
    "type": 1,
    "title": "nginx",
    "description": "Open source reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache, and a web server (origin server)",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/nginx.png",
    "image": "arm32v6/nginx",
    "platform": "linux",
    "note": "Official docker library image for Nginx: https://hub.docker.com/r/arm32v6/nginx",
    "categories": ["official", "nginx"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "web" },
      { "name": "proto", "value": "http" },
      { "name": "name", "value": "nginx" }
    ],
    "ports": [
      "80:80/tcp",
      "443:443/tcp"
    ],
    "volumes": [
      {"container": "/usr/share/nginx/html", "bind": "/data/nginx"}
    ],
    "env": [
      {
        "name":"NGINX_HOST",
        "label": "Nginx Hostname",
        "description": "Nginx Hostname",
        "set": ""
      },
      {
        "name":"NGINX_PORT",
        "label":"Port",
        "description": "Port where nginx will be listeting",
        "set": "80"
      }
    ]
  },
  {
    "type": 1,
    "title": "openjdk",
    "description": "OpenJDK (Open Java Development Kit) is a free and open source implementation of the Java Platform, Standard Edition (Java SE). OpenJDK is the official reference implementation of Java SE since version 7.",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/openjdk.png",
    "image": "arm32v6/openjdk",
    "platform": "linux",
    "note": " Docker Official Images for Java: https://hub.docker.com/r/arm32v6/openjdk",
    "categories": ["official", "openjdk"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "cli" },
      { "name": "name", "value": "java" }
    ],
    "ports": [],
    "volumes": [],
    "env": []
  },
  {
    "type": 1,
    "title": "golang",
    "description": "Go (a.k.a., Golang) is a programming language first developed at Google",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/golang.png",
    "image": "arm32v6/golang",
    "platform": "linux",
    "note": " Docker Official Images for Golang: https://hub.docker.com/r/arm32v6/golang",
    "categories": ["official", "golang"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "cli" },
      { "name": "name", "value": "golang" }
    ],
    "ports": [],
    "volumes": [],
    "env": []
  },
  {
    "type": 1,
    "title": "python",
    "description": "Python is an interpreted, interactive, object-oriented, open-source programming language",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/python.png",
    "image": "arm32v6/python",
    "platform": "linux",
    "note": " Docker Official Images for Python: https://hub.docker.com/r/arm32v6/python",
    "categories": ["official", "python"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "cli" },
      { "name": "name", "value": "python" }
    ],
    "ports": [],
    "volumes": [],
    "env": []
  },
  {
    "type": 1,
    "title": "debian",
    "description": "Linux/GNU Debian stable",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/debian.png",
    "image": "debian:stable-slim",
    "platform": "linux",
    "note": " Docker Official Images: https://hub.docker.com/_/debian",
    "categories": ["official", "debian"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "cli" },
      { "name": "name", "value": "debian" }
    ],
    "ports": [],
    "volumes": [],
    "env": []
  },
  {
    "type": 1,
    "title": "alpine",
    "description": "A minimal Docker image based on Alpine Linux with a complete package index and only 5 MB in size! Alpine Linux is a Linux distribution built around musl libc and BusyBox.",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/alpine.png",
    "image": "arm32v6/alpine",
    "platform": "linux",
    "note": " Docker Official Images for Linux Alpine: https://hub.docker.com/r/arm32v6/bash",
    "categories": ["official", "apline"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "cli" },
      { "name": "name", "value": "alpine" }
    ],
    "ports": [],
    "volumes": [],
    "env": []
  },
  {
    "type": 1,
    "title": "bash",
    "description": "Bash is the GNU Project's Bourne Again SHell",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/bash.png",
    "image": "arm32v6/bash",
    "platform": "linux",
    "note": " Docker Official Images for Bash https://hub.docker.com/r/arm32v6/bash",
    "categories": ["official", "bash"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "cli" },
      { "name": "name", "value": "bash" }
    ],
    "ports": [],
    "volumes": [],
    "env": []
  },
  {
    "type": 1,
    "title": "homeassistant",
    "description": "Home Assistant",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/ha.png",
    "image": "jriguera/homeassistant:latest",
    "platform": "linux",
    "note": "Docker image created from https://github.com/jriguera/docker-rpi-homeassistant",
    "categories": ["ha", "zwave", "iot"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "web" },
      { "name": "proto", "value": "http" },
      { "name": "name", "value": "homeassistant" }
    ],
    "ports": [
      "8123:8123/tcp"
    ],
    "volumes": [
      {"container": "/config", "bind": "/data/ha/config"}
    ],
    "env": []
  },
  {
    "type": 1,
    "title": "mariadb",
    "description": "An Enhanced drop in replacement for Mysql",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/mariadb.png",
    "image": "jriguera/mariadb:latest",
    "platform": "linux",
    "note": "Docker image created from https://github.com/jriguera/docker-rpi-mariadb",
    "categories": ["sql", "database", "mysql"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "database" },
      { "name": "proto", "value": "sql" },
      { "name": "name", "value": "mariadb" }
    ],
    "ports": [
      "3306:3306/tcp"
    ],
    "volumes": [
      {"container": "/var/lib/mysql", "bind": "/data/mariadb/data"}
    ],
    "env": [
      {
        "name":"MYSQL_ROOT_PASSWORD",
        "label": "Root password",
        "description": "Password used by the root user. If not set, it will be automatically created",
        "set": ""
      },
      {
        "name":"MYSQL_DATABASE",
        "label":"Database name",
        "description": "Name of the dabatase"
      },
      {
        "name":"MYSQL_USER",
        "label":"Database user name",
        "description": "Name of the dabatase user for connection string"
      },
      {
        "name":"MYSQL_PASSWORD",
        "label":"Database user password",
        "description": "Password of the dabatase user for connection string"
      }
    ]
  },
  {
    "type": 1,
    "title": "tasmoadmin",
    "description": "TasmoAdmin is a web application to manage Sonoff Devices flashed with Tasmota",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/tasmoadmin.png",
    "image": "jriguera/tasmoadmin:latest",
    "platform": "linux",
    "note": "Docker image created from https://github.com/jriguera/docker-rpi-tasmoadmin",
    "categories": ["web", "sonoff", "iot"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "web" },
      { "name": "proto", "value": "http" },
      { "name": "name", "value": "tasmoadmin" }
    ],
    "ports": [
      "1080:80/tcp"
    ],
    "volumes": [
      {"container": "/data", "bind": "/data/tasmoadmin/data"}
    ],
    "env": [
      {
        "name":"TASMOADMIN_USER",
        "label": "Admin Username",
        "description": "Admin username to perform login",
        "set": "admin"
      },
      {
        "name":"TASMOADMIN_PASS",
        "label":"Password",
        "description": "Admin password"
      },
      {
        "name":"TASMOADMIN_LOGIN",
        "label":"Login enabled",
        "description": "Enable or disable login",
        "set": "1"
      }
    ]
  },
  {
    "type": 1,
    "title": "mosquitto",
    "description": "Mosquitto is a message broker that implements the MQTT protocol",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/mosquitto.png",
    "image": "jriguera/mosquitto:latest",
    "platform": "linux",
    "note": "Docker image created from https://github.com/jriguera/docker-rpi-mosquitto",
    "categories": ["mqtt", "mosquitto"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "middleware" },
      { "name": "proto", "value": "mqtt" },
      { "name": "name", "value": "mosquitto" }
    ],
    "ports": [
      "1883:1883/tcp"
    ],
    "volumes": [
      {"container": "/mqtt", "bind": "/data/mosquitto/data"}
    ],
    "env": [
      {
        "name":"MQTT_PERSISTENCE",
        "label": "MQTT Persistence",
        "description": "Enable persistence on disk",
        "set": "true"
      },
      {
        "name":"MQTT_USER",
        "label":"User name",
        "description": "Name of the user for connection string"
      },
      {
        "name":"MQTT_PASSWORD",
        "label":"User password",
        "description": "Password of the user for connection string"
      }
    ]
  },
  {
    "type": 1,
    "title": "traefik",
    "description": "Traefik is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy",
    "logo": "https://raw.githubusercontent.com/jriguera/docker-portainer/master/rpi/images/traefik.png",
    "image": "jriguera/traefik:latest",
    "platform": "linux",
    "note": "Docker image created from https://github.com/jriguera/docker-rpi-traefik",
    "categories": ["http", "router", "traefik"],
    "restart_policy": "unless-stopped",
    "labels": [
      { "name": "type", "value": "router" },
      { "name": "proto", "value": "http" },
      { "name": "name", "value": "traefik" }
    ],
    "ports": [
      "80:80/tcp",
      "443:443/tcp",
      "8080:8080/tcp"
    ],
    "volumes": [
      {"container": "/var/run/docker.sock", "bind": "/var/run/docker.sock"},
      {"container": "/etc/traefik", "bind": "/data/traefik/config"}
    ],
    "env": []
  }
]
